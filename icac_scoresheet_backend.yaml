openapi: '3.0.2'

info:
  title: ICAC Scoresheet Backend APIs
  version: '0.3.1'
  description: >
    This document describes the specifications of the ICAC Scoresheet HTTP API server for simple CRUD operations. Matches **ARE NOT** served through these endpoints. Refer to the `/match-server` AsyncAPI specs using Websockets at `http://localhost:8001/match-server/`.
  contact: {
    email: ignatiuselbert5@gmail.com
  }
    
servers:
  - url: http://localhost:8001/api
 
tags:
  - name: auth
    description: HTTP endpoints pertaining to user creation, deletion, and authentication.
  - name: matches
    description: HTTP endpoints pertaining to match creation, retrieval, and access authentication.

paths:
  /auth/sign-up/user:
    post:
      summary: Sign up regular users on ICAC Scoresheet.
      description: >
        Sign up regular users through this endpoint. Call after form submission, attaching the required fields in the request body. Details beyond `email` and `password` are going to be saved in the table `public.archer_profiles` as well as the Supabase default `auth.users` table as a JSON document in the `raw_user_meta_data` column.
      operationId: signUpUser
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User was successfully created.
        '409':
          description: Email already exists.
        '400':
          description: Request body is missing one or more required fields.
        '429':
          description: Rate limit exceeded.
  /auth/sign-up/club:
    post:
      summary: Sign up clubs on ICAC Scoresheet. *not yet implemented
      description: >
        Clubs would need to consult our team to use the service before being authorized to use this endpoint. Once payment is made, we will send a link to their email leading to the sign up page issued with a **sign up token**. This token will be set as a query parameter for the sign up page and forwarded to this endpoint automatically. The token would be generated as a unique hash of the **club name**, **email address**, and **creation timestamp**. The submitted **club name** and **email address** would therefore be validated by first looking up the token, obtaining its **creation timestamp**, and checking if its hash with the **club name** and **email address** matches the **unused and valid (not expired)** token.
      operationId: signUpClub
      tags:
        - auth
      parameters:
        - name: token
          in: query
          required: true
          description: The **sign up token** issued for the club.
          schema:
            type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Club'
      responses:
        '201':
          description: User was successfully created.
        '401':
          description: User creation denied due to problems with the **sign up token**.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - token missing from request
                      - token not found
                      - token already used
                      - token expired
        '409':
          description: Club name or email does not match an existing valid token.
        '400':
          description: Request body is missing one or more required fields.
  /auth/sign-in:
    post:
      summary: Sign in users into ICAC Scoresheet.
      description: >
        All users will sign in through this endpoint. Based on the submitted credentials, a database lookup will be performed to determine whether the user is a **club** or a **regular user**. A link will be returned with the response body if sign in was successful, leading to either the **user** or **club** home page. If sign in credentials do not match, a 401 error is returned.
      operationId: signInUser
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Sign in successful.
        '401':
          description: Sign in failed.
  /auth/sign-out:
    post:
      summary: Sign out users from ICAC Scoresheet.
      description: >
        All users should be signed out through this endpoint. Sign out will be performed on the Express backend (server-side) by removing the **authentication cookie** (carrying the issued JWT) from the request. A response with the cookie removed is then returned, effectively removing the user's authentication credentials.
      operationId: signOutUser
      tags:
        - auth
      responses:
        '200':
          description: Sign out successful.
  /auth/user:
    delete:
      summary: Delete user account.
      description: >
        This is an authenticated endpoint that allows **signed in Users** to delete their own accounts. Upon successful deletion, users are going to be automatically signed out. The user ID will be automatically extracted from the submitted JWT. If the JWT is invalid or not found with the request, a 401 error is returned.
      operationId: deleteUserAccount
      tags:
        - auth
      security:
        - auth-token: []
      responses:
        '200':
          description: User successfully deleted. Handle with redirection back to the home page.
        '401':
          description: User was not signed in due to an invalid or missing JWT.
        

  /matches:
    post:
      summary: Create a new match.
      description: >
        When users choose to host a match, call this endpoint to create a new **Match** in Redis. The **Match** will be automatically created as a Redis JSON object with an assigned UUID as its key. The inclusion of the `whitelist` field in the request body implies the creation of a **restricted Match**. These would be **Matches** where only specific users in the `whitelist` can join the **Match**. The **Match** name must be **exclusively alphanumeric** with **underscores** or **spaces**.
      tags:
        - matches
      operationId: createMatch
      security:
        - auth-token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '201':
          description: >
            **Match** successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveMatch'
        '400':
          description: Request body missing required fields or **Match** name contains forbidden characters.
        '409':
          description: A live match currently exists with the same name.
        '401':
          description: User is unauthenticated.

  /matches/{match_id}:
    delete:
      summary: Delete a live match.
      description: >
        Sometimes, **Matches** could stall due to unforeseen errors. For whatever reason, this endpoint would allow match hosts/administrators to remove live **Matches** from Redis. 
      operationId: deleteMatch
      tags:
        - matches
      security:
        - auth-token: []
      parameters:
        - name: match_id
          in: path
          required: true
          description: The `match_id` of a live **Match** to delete.
          schema:
            type: string
      responses:
        '200':
          description: >
            **Match** successfully deleted.
        '401':
          description: User is unauthenticated.
        '403':
          description: User was neither a **Match** host nor a system administrator.
        '404':
          description: The submitted `match_id` was not found in Redis.
  
  /matches/live/{match_name}:
    get:
      summary: Retrieves currently live matches by name.
      description: >
        Retrieves currently live **Matches** by name. The `state` parameter can be included to select for live **Matches** in a specific lifecycle state or excluded to fetch all live **Matches** matching the queried name pattern.
      tags:
        - matches
      operationId: getLiveMatchesByName
      security:
        - auth-token: []
      parameters:
        - name: match_name
          in: path
          required: true
          description: Match name to search in Redis.
          schema:
            type: string
        - name: state
          in: query
          description: >
            Specify an array live match states to confine search to. Otherwise, exclude to fetch all live matches.
          schema:
            type: array
            items:
              type: string
              enum:
                - open
                - full
                - submit
                - waiting submit
                - confirmation
                - waiting confirmation
                - finished
                - paused
        - name: host_only
          in: query
          description: >
            When set to **true**, only returns **Matches** hosted by the currently logged in user. The user's `id` is going to be automatically extracted from the submitted authentication token.
          schema:
            type: boolean
      responses:
          '200':
            description: One or more **Matches** found with matching name.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LiveMatch'
          '204':
            description: No live **Matches** found with matching name.
          '400':
            description: >
              `match_name` path parameter was missing/malformed or requested state was invalid.
          '401':
            description: User is unauthenticated.

  /matches/completed/{match_name}:
    get:
      summary: Retrieves completed matches by name.
      description: >
        Retrieves completed **Matches** by name.
      tags:
        - matches
      operationId: getCompletedMatchesByName
      security:
        - auth-token: []
      parameters:
        - name: match_name
          in: path
          required: true
          description: Match name to search in PostgreSQL.
          schema:
            type: string
        - name: host_only
          in: query
          description: >
            When set to **true**, only returns **Matches** hosted by the currently logged in user. The user's `id` is going to be automatically extracted from the submitted authentication token.
          schema:
            type: boolean
        - name: after
          in: query
          description: Date after which match was finished.
          schema:
            type: string
            format: date
        - name: before
          description: Date before which match was finished.
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: One or more completed **Matches** found with matching name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletedMatch'
        '204':
          description: No completed **Matches** found with matching name.
        '400':
          description: >
            `match_name` path parameter was missing/malformed.
        '401':
          description: User is unauthenticated.
          
  /matches/{match_id}/results:
    get:
      summary: Retrieves match results by ID.
      description: >
        Retrieves all **Scoresheets** associated with the **Match** requested. If **Match ID** is not known, users should first be provided with the option to search by **Match name** through `/matches/{match_name}` which will return the IDs associated with each **Match**. Because **Scoresheets** are only saved in the database after the completion of a **Match**, this endpoint only retrieves the results of completed **Matches**.
      operationId: getMatchResults
      security:
        - auth-token: []
      tags:
        - matches
      parameters:
        - name: match_id
          in: path
          required: true
          description: The **Match ID** of the requested **Scoresheets**.
          schema:
            type: string
      responses:
        '200':
          description: A **Match** was found with the queried `match_id`.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scoresheet'
        '204':
          description: No **Matches** were found with the queried `match_id`.
        '401':
          description: User is unauthenticated.
  
  /matches/{match_id}/reserve:
    post:
      summary: Request access into and reserve a spot in a live match.
      description: >
        Users need to be authenticated to obtain an `access_token` for a requested **Match**. Furthermore, the **Match** needs to be in the "open" state at request time. Users cannot request for more than one valid `access_token` at a time and this will be evaluated based on the presence of a valid token in the request cookie. Restricted **Matches** would additionally require that users are in the configured `whitelist`. The `access_token` will have a configured TTL of 15s. Because routing and Websocket connection to the lobby will be performed automatically by the client, the short TTL of the issued token should not be an problem under authorized use cases of this endpoint. If all the above conditions are met, the `access_token` will be returned as a JWT in an *HttpOnly* cookie to be submitted to the `/match-server` when connecting to the match lobby. A spot in the match will be reserved for the user for the TTL of the `access_token` to prevent race conditions that could be caused by multiple users requesting access to the same match at the same time.
      operationId: getMatchAccessToken
      security:
        - auth-token: []
      tags:
        - matches
      parameters:
        - name: match_id
          in: path
          required: true
          description: The **Match ID** to request access to.
          schema:
            type: string
      responses:
        '200':
          description: The requested **Match** is open with available reservation spots. Token granted as an *HttpOnly* cookie.
        '403':
          description: The requested **Match** is no longer open, is fully reserved, or the user has attempted to obtain a second `access_token` whilst possessing a currently valid one.
        '404':
          description: The requested **Match** does not exist.
        '401':
          description: User is unauthenticated.


components:
  securitySchemes:
    auth-token:
      type: apiKey
      in: cookie
      name: JWT

  schemas:
    User:
      type: object
      required:
        - email
        - first_name
        - last_name
        - password
        - gender
        - date_of_birth
      properties:
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
        gender:
          type: string
        date_of_birth:
          type: string
          format: date
        archery_gb_experience:
          type: string
        archery_gb_membership:
          type: string
        club:
          type: string
        disability:
          type: boolean

    Club:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
        university:
          type: string

    Match:
      type: object
      required:
        - name
        - num_archers
        - arrows_per_end
        - num_ends
      properties:
        name:
          type: string
        round:
          type: string
        max_participants:
          type: integer
        arrows_per_end:
          type: integer
        num_ends:
          type: integer
        whitelist:
          type: array
          items:
            type: string
    
    CompletedMatch:
      type: object
      required:
        - id
        - name
        - host
        - created_at
        - finished_at
      properties:
        id:
          type: string
        host:
          type: string
        name:
          type: string
        finished_at:
          type: string
          format: datetime
        created_at:
          type: string
          format: datetime
        competition:
          type: string
        round:
          type: string

    LiveMatch:
      type: object
      required:
        - name
        - num_archers
        - arrows_per_end
        - num_ends
        - created_at
        - current_end
        - current_state
        - previous_state
        - host
        - participants
      properties:
        id:
          type: string
        value:
          type: object
          properties:        
            name:
              type: string
            num_archers:
              type: integer
            arrows_per_end:
              type: integer
            num_ends:
              type: integer
            created_at:
              type: string
              format: datetime
            current_end:
              type: integer
            current_state:
              type: string
            previous_state:
              type: string
            host:
              type: string
            participants:
              type: array
              items:
                $ref: '#/components/schemas/MatchParticipant'
            whitelist:
              type: object
              properties:
                role:
                  type: string
                  enum:
                    - archer
                    - judge

    MatchParticipant:
      type: object
      required:
        - ready
        - role
      properties:
        ready:
          type: boolean
        role:
          type: string
          enum:
            - archer
            - judge
        scores:
          type: array
          items:
            type: object
        ends_confirmed:
          type: array
          items:
            type: boolean
    
    Arrow:
      type: object
      required:
        - score
      properties:
        score:
          type: integer
        prev_score:
          type: integer
        judge_uuid:
          type: string

    Scoresheet:
      type: object
      required:
        - user_id
        - arrows_shot
        - arrows_per_end
        - created_at
        - match_id
        - scoresheet
      properties:
        id:
          type: string
        competition:
          type: string
        user_id:
          type: string
        round:
          type: string
        arrows_shot:
          type: integer
        arrows_per_end:
          type: integer
        bow:
          type: string
        created_at:
          type: string
          format: datetime
        match_id:
          type: string
        scoresheet:
          type: array
          items:
            $ref: '#/components/schemas/Arrow'